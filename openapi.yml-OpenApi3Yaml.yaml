openapi: "3.0.0"
info:
  title: Swagger REST Article
  description: This is the swagger file that goes with our server code
  version: '1.0.0'
servers:
- url: https://localhost:5000/api/

paths:
  /notebook:
    get:
      tags:
      - Notebook
      summary: notebook.getAllNotebook
      description: Read the list of notebook
      operationId: notebook.getAllNotebook
      responses:
        200:
          description: Successful read notebook list operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/notebook.getAllNotebookResponse'
                description: Successful read notebook list operation
      deprecated: false
    
    post:
      tags:
      - Notebook
      summary: notebook.newNotebook
      description: Create a new notebook in the notebooks list
      operationId: notebook.newNotebook
      requestBody:
        description: Notebook to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notebook'
        required: true
      responses:
        201:
          description: Successfully created notebook in list
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notebook.newNotebookResponse'
              example:
                value:
                - id: 3
                  name: another_foo
                  created_date: 2020-10-31 21:05:46
                  docker_image_name: This is a docker image
                  deployment_name: deployment
                  notebook_url: another_foo-3.notebooks.kubernetes.local
                  status: created
      deprecated: false

  /notebook/{id}:
    get:
      tags:
      - Notebook
      summary: notebook.getNotebookById
      description: Read one notebook from the notebooks list
      operationId: notebook.getNotebookById
      parameters:
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        201:
          description: Successfully read notebook from notebooks list operation
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notebook.getNotebookByIdResponse'
              example:
                value:
                - id: 1
                  name: foo
                  created_date: 2020-10-31 21:05:46
                  docker_image_name: This is a docker image
                  deployment_name: deployment
                  notebook_url: foo-1.notebooks.kubernetes.local
                  status: created
      deprecated: false
    put:
      tags:
      - Notebook
      summary: notebook.updateNotebook
      description: Update a notebook in the notebooks list
      operationId: notebook.updateNotebook
      parameters:
      - name: id
        in: path
        description: id of the notebook to update in the list
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notebook'
        required: false
      responses:
        200:
          description: Successfully updated notebook from notebooks list operation
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notebook.updateNotebookResponse'
              example:
                value:
                - id: 1
                  name: NewName
                  created_date: 2020-10-31 21:05:46
                  docker_image_name: This is a docker image
                  deployment_name: deployment
                  notebook_url: NewName-1.notebooks.kubernetes.local
                  status: created
      deprecated: false
    delete:
      tags:
      - Notebook
      summary: notebook.deleteNotebook
      description: Delete a notebook
      operationId: notebook.deleteNotebook
      parameters:
      - name: id
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successfully deleted a notebook from notebook list
          headers: {}
      deprecated: false
  /training:
    get:
      tags:
      - Training
      summary: training.getAllTraining
      description: Read the list of training
      operationId: training.getAllTraining
      parameters: []
      responses:
        200:
          description: Successful read training list operation
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/training.getAllTrainingResponse'
                description: Successful read training list operation
      deprecated: false

    post:
      tags:
      - Training
      summary: training.newTraining
      description: Create a new training in the trainings list
      operationId: training.newTraining
                 

      requestBody:
        description: training to create
        content:
          multipart/form-data:
            schema:         
              type: object
              properties:
                training:
                  type: object
                  properties:
                    name:
                      type: string
                file:
                  type: string
                  format: base64
            encoding:
              training:
                contentType: application/json
              file:
                contentType: file               

      responses:
        201:
          description: Successfully created training in list
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/training.newTrainingResponse'
              example:
                value:
                  id: 14
                  name: a new training
                  created_date: 2020-03-27 19:00:02
                  status: Done
                  filename: mimir.zip
      deprecated: false
  /training/{id}:
    put:
      tags:
      - Training
      summary: training.updateTraining
      description: Update a training in the trainings list
      operationId: training.updateTraining
      parameters:
      - name: id
        in: path
        description: id of the training to update in the list
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/training'
        required: false
      responses:
        200:
          description: Successfully updated training
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/training.updateTrainingResponse'
              example:
                value:
                  id: 4
                  name: Training name
                  created_date: 2020-03-27 19:00:02
      deprecated: false
    get:
      tags:
      - Training
      summary: training.getTrainingById
      description: Read one training from the trainings list
      operationId: training.getTrainingById
      parameters:
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successfully read training from trainings list operation
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/training.getTrainingByIdResponse'
              example:
                value:
                  training_id: 7
                  training_name: my training
                  created_date: 2020-03-26 21:02:00
                  endpoints_count: 2
      deprecated: false
    delete:
      tags:
      - Training
      summary: training.deleteTraining
      description: Delete a training
      operationId: training.deleteTraining
      parameters:
      - name: id
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successfully deleted a training from training list
          headers: {}
      deprecated: false
  /endpoints:
    get:
      tags:
      - Endpoint
      summary: endpoint.getAllEndpoint
      description: Read the list of endpoint
      operationId: endpoint.getAllEndpoint
      parameters: []
      responses:
        200:
          description: Successfull read endpoint list operation
          headers: {}
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/endpoint.getAllEndpointResponse'
                description: Successfull read endpoint list operation
      deprecated: false
  /endpoints/endpoint:
    post:
      tags:
      - Endpoint
      summary: endpoint.newEndpoint
      description: Create a new endpoint in the endpoints list
      operationId: endpoint.newEndpoint
      parameters: []
      requestBody:
        description: endpoint to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoint'
        required: true
      responses:
        201:
          description: Successfully created endpoint in list
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoint.newEndpointResponse'
              example:
                value:
                  endpoint_id: 14
                  endpoint_name: newEndpoint
                  created_date: 2020-03-27 19:00:02
                  status: Done
                  training:
                    id: 9
                    name: training name
                    created_date: 2020-03-27 14:00:02
        409:
          description: Endpoint already exists
      deprecated: false
  /endpoint/{id}:
    put:
      tags:
      - Endpoint
      summary: endpoint.updateEndpoint
      description: Update a endpoint in the endpoints list
      operationId: endpoint.updateEndpoint
      parameters:
      - name: id
        in: path
        description: Id of the endpoint associated with a person
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/endpoint'
        required: false
      responses:
        200:
          description: Endpoint updated Successfully
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoint.updateEndpointResponse'
              example:
                value:
                  endpoint_id: 14
                  endpoint_name: Endpoint updated
                  created_date: 2020-03-27 19:00:02
                  status: Done
                  training:
                    id: 9
                    name: training name
                    created_date: 2020-03-27 14:00:02
        404:
          description: not found one endpoint with this id
      deprecated: false
    get:
      tags:
      - Endpoint
      summary: endpoint.getEndpointById
      description: Read one endpoint from the endpoints list
      operationId: endpoint.getEndpointById
      parameters:
      - name: id
        in: path
        description: id
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        201:
          description: Successfully read endpoint from endpoints list operation
          headers: {}
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/endpoint.getEndpointByIdResponse'
              example:
                value:
                  id: 7
                  name: OneEndpoint
                  created_date: 2020-03-26 21:02:00
                  training:
                    id: 9
                    name: training name
                    created_date: 2020-03-27 14:00:02
        404:
          description: Unable to find the endpoint with given endpoint_id
      deprecated: false
    delete:
      tags:
      - Endpoint
      summary: endpoint.deleteEndpoint
      description: Delete a endpoint
      operationId: endpoint.deleteEndpoint
      parameters:
      - name: id
        in: path
        description: ''
        required: true
        style: simple
        schema:
          type: integer
          format: int32
      responses:
        200:
          description: Successfully deleted a endpoint from endpoint list
          headers: {}
        404:
          description: not found endpoint with the given endpoint_id
      deprecated: false

components:
  schemas:
    notebook.getAllNotebookResponse:
      title: notebook.getAllNotebookResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        docker_image_name:
          type: string
        deployment_name:
          type: string
        notebook_url:
          type: string
        status:
          type: string
    notebook:
      title: notebook
      type: object
      properties:
        name:
          type: string
          description: name of notebook to create
    notebook.newNotebookResponse:
      title: notebook.newNotebookResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        docker_image_name:
          type: string
        deployment_name:
          type: string
        status:
          type: string
    notebook.getNotebookByIdResponse:
      title: notebook.getNotebookByIdResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        docker_image_name:
          type: string
        deployment_name:
          type: string
        notebook_url:
          type: string
        status:
          type: string
    notebook.updateNotebookResponse:
      title: notebook.updateNotebookResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        docker_image_name:
          type: string
        deployment_name:
          type: string
        notebook_url:
          type: string
        status:
          type: string
    training.getAllTrainingResponse:
      title: training.getAllTrainingResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        endpoints_count:
          type: integer
          format: int32
    Training:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    training:
      type: object
      properties:
        name:
          type: string
          description: name of training to create
    training.newTrainingResponse:
      title: training.newTrainingResponse
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
          format: int32
        created_date:
          type: string
        status:
          type: string
        file:
          type: string

    training.updateTrainingResponse:
      title: training.updateTrainingResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        endpoints_count:
          type: integer
          format: int32
    training.getTrainingByIdResponse:
      title: training.getTrainingByIdResponse
      type: object
      properties:
        name:
          type: string
        id:
          type: integer
          format: int32
        created_date:
          type: string
        endpoints_count:
          type: integer
          format: int32
    endpoint.getAllEndpointResponse:
      title: endpoint.getAllEndpointResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        training:
          $ref: '#/components/schemas/Training2'
    Training2:
      title: Training2
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
    endpoint:
      title: endpoint
      type: object
      properties:
        name:
          type: string
        training_id:
          type: integer
          format: int32
    endpoint.newEndpointResponse:
      title: endpoint.newEndpointResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        status:
          type: string
        training:
          $ref: '#/components/schemas/Training2'
    endpoint.updateEndpointResponse:
      title: endpoint.updateEndpointResponse
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        created_date:
          type: string
        training:
          $ref: '#/components/schemas/Training2'
    endpoint.getEndpointByIdResponse:
      title: endpoint.getEndpointByIdResponse
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        created_date:
          type: string
        training:
          $ref: '#/components/schemas/Training2'
tags:
- name: Notebook
  description: ''
- name: Training
  description: ''
- name: Endpoint
  description: ''
