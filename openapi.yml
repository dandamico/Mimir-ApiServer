swagger: "2.0"
info:
  description: This is the swagger file that goes with our server code
  version: "1.0.0"
  title: Swagger REST Article
consumes:
  - "application/json"
produces:
  - "application/json"

basePath: "/api"



paths:
                
  /notebook:

    post:
      operationId: notebook.newNotebook
      summary: Create a notebook and add it to the notebooks list
      description: Create a new notebook in the notebooks list
      parameters:
        - name: notebook
          in: body
          description: Notebook to create
          required: True
          schema:
            type: object
            properties:
              notebook_name:
                type: string
                description:  name of notebook to create

      responses:
        201:
          description: Successfully created notebook in list
          schema:
            type: object
            properties:
              notebook_id:
                type: integer
              notebook_name:
                type: string
              createdDate:
                  type: string
          examples:
            success:
              value:
                - notebook_name: 'New Notebook'
                  notebook_id: 20
                  createdDate: '2020-10-31 21:05:46'

    get:
      operationId: notebook.getAllNotebook
      summary: Read the entire list of notebook
      description: Read the list of notebook
      responses:
        200:
          description: "Successful read notebook list operation"
          schema:
            type: array
            items:
              properties:
                notebook_name:
                  type: string
                notebook_id:
                  type: integer
                createdDate:
                  type: string
          examples:
            success:
              value:
                - notebook_name: 'first notebook'
                  notebook_id: 1
                  createdDate: '2020-03-27 21:00:00' 
                    
                - notebook_name: 'second notebook'
                  notebook_id: 2
                  createdDate: '2020-03-27 22:00:00' 

  /notebook/{notebook_id}:
    get:
      operationId: "notebook.getNotebookById"
      summary: Read one notebook from the notebooks list
      description: Read one notebook from the notebooks list
      parameters:
        - name: notebook_id
          in: path
          description: "id"
          type: integer
          required: True
      responses:
        201:
          description: Successfully read notebook from notebooks list operation
          schema:
            properties:
              notebook_name:
                type: "string"
              notebook_id:
                type: integer
              createdDate:
                type: "string"

          examples:
            success:
              value:
                - notebook_name: 'first notebook'
                  notebook_id: 1
                  createdDate: '2020-10-31 21:05:46'

    put:
      operationId: notebook.updateNotebook
      summary: Update a notebook in the notebooks list
      description: Update a notebook in the notebooks list
      parameters:
        - name: notebook_id
          in: path
          description: "id of the notebook to update in the list"
          type: integer
          required: True

        - name: notebook
          in: body
          schema:
            type: object
            properties:
              notebook_name:
                type: string

      responses:
        200:
          description: Successfully updated notebook from notebooks list operation
          schema:
            properties:
              notebook_name:
                type: "string"
              notebook_id:
                type: integer
              createdDate:
                type: "string"

          examples:
            success:
              value:
                - notebook_name: 'new notebook name'
                  notebook_id: 1
                  createdDate: '2020-10-31 21:05:46'


    delete:
      operationId: notebook.deleteNotebook
      summary: Delete a notebook from the notebooks list
      description: Delete a notebook
      parameters:
        - name: notebook_id
          in: path
          type: integer
          required: True
      responses:
        200:
          description: Successfully deleted a notebook from notebook list


  /training:
    get:
      operationId: training.getAllTraining
      summary: Read the entire list of training
      description: Read the list of training
      responses:
        200:
          description: "Successful read training list operation"
          schema:
            type: array
            items:
              properties:
                training_name:
                  type: string
                training_id:
                  type: integer
                createdDate:
                  type: string
                endpoints:
                  type: array
                  items:
                    properties:
                      training_id:
                        type: integer
                      endpoint_id:
                        type: integer
                      endpoint_name:
                        type: string
                      createdDate:
                        type: string
          examples:
            success:
              value:
                - training_name: 'first training'
                  training_id: 5
                  createdDate: '2020-03-27 21:00:00' 
                    
                - training_name: 'second training'
                  training_id: 3
                  createdDate: '2020-03-27 22:00:00' 
                  
    post:
      operationId: training.newTraining
      summary: Create a training and add it to the trainings list
      description: Create a new training in the trainings list
      parameters:
        - name: training
          in: body
          description: training to create
          required: True
          schema:
            type: object
            properties:
              training_name:
                type: string
                description:  name of training to create

      responses:
        201:
          description: Successfully created training in list
          schema:
            type: object
            properties:
              training_name:
                type: string
              training_id:
                type: integer
              createdDate:
                  type: string
          examples:
            success:
              value:
                  training_id: 14
                  training_name: 'a new training'
                  createdDate: '2020-03-27 19:00:02'

  /training/{training_id}:
    put:
      operationId: training.updateTraining
      summary: Update a training in the trainings list
      description: Update a training in the trainings list
      parameters:
        - name: training_id
          in: path
          description: "id of the training to update in the list"
          type: integer
          required: True

        - name: training
          in: body
          schema:
            type: object
            properties:
              training_name:
                type: string

      responses:
        200:
          description: Successfully updated training
          schema:
            properties:
              training_id:
                type: integer
              training_name:
                type: string
              createdDate:
                type: string

    get:
      operationId: training.getTrainingById
      summary: Read one training from the trainings list
      description: Read one training from the trainings list
      parameters:
        - name: training_id
          in: path
          description: "id"
          type: integer
          required: True
      responses:
        200:
          description: Successfully read training from trainings list operation
          schema:
            properties:
              training_name:
                type: "string"
              training_id:
                type: integer
              createdDate:
                type: "string"
              endpoints:
                type: array
                items:
                  properties:
                    training_id:
                      type: integer
                    endpoint_id:
                      type: integer
                    endpoint_name:
                      type: string
                    createdDate:
                        type: string
          examples:
            success:
              value:
                training_id: 7
                training_name: 'my training'
                createdDate: '2020-03-26 21:02:00'              

    delete:
      operationId: training.deleteTraining
      summary: Delete a training from the trainings list
      description: Delete a training
      parameters:
        - name: training_id
          in: path
          type: integer
          required: True
      responses:
        200:
          description: Successfully deleted a training from training list

  /endpoints:
    get:
      operationId: endpoint.getAllEndpoint
      summary: Read the entire list of endpoint
      description: Read the list of endpoint
      responses:
        200:
          description: "Successfull read endpoint list operation"
          schema:
            type: array
            items:
              properties:
                endpoint_name:
                  type: string
                endpoint_id:
                  type: integer
                createdDate:
                  type: string
                training:
                  type: object
                  properties:
                    training_id:
                      type: integer
                    training_name:
                      type: string
                    createdDate:
                      type: string

          examples:
            success:
              value:
                - endpoint_name: 'first'
                  endpoint_id: 5
                  createdDate: '2020-03-27 21:00:00'
                  training_id: 4


                - endpoint_name: 'second'
                  endpoint_id: 3
                  createdDate: '2020-03-27 22:00:00' 
                  training_id: 7
                  

  /training/{training_id}/endpoints:             
    post:
      operationId: endpoint.newEndpoint
      summary: Create a endpoint and add it to the endpoints list
      description: Create a new endpoint in the endpoints list
      parameters:
        - name: endpoint
          in: body
          description: endpoint to create
          required: True
          schema:
            type: object
            properties:
              endpoint_name:
                type: string
        - name: training_id
          in: path
          type: integer
          required: True
                
      responses:
        201:
          description: Successfully created endpoint in list
          schema:
            type: object
            properties:
              endpoint_id:
                type: integer
              endpoint_name:
                type: string
              createdDate:
                type: string
              training_id:
                type: integer

          examples:
            success:
              value:
                endpoint_name: 'newEndpoint'
                endpoint_id: 14      
                createdDate: '2020-03-27 19:00:02'
                training_id: 56
        409:
          description: 'Endpoint already exists'


  /training/{training_id}/endpoints/{endpoint_id}:
    put:
      operationId: endpoint.updateEndpoint
      summary: Update a endpoint in the endpoints list
      description: Update a endpoint in the endpoints list
      parameters:
        - name: training_id
          in: path
          description: Id the trainign to update
          type: integer
          required: True
        - name: endpoint_id
          in: path
          description: Id of the endpoint associated with a person
          type: integer
          required: True
        - name: endpoint
          in: body
          schema:
            type: object
            properties:
              content:
                type: string
                description: Text content of the note to updated
      responses:
        '200':
          description: 'ok'
          schema:
            properties:
              endpoint_id:
                type: string
              training_id:
                type: string
              endpoint_name:
                type: string
              createdDate:
                type: string
        '404':
          description: 'not found one endpoint with this id'

    get:
      operationId: "endpoint.getEndpointById"
      summary: Read one endpoint from the endpoints list
      description: Read one endpoint from the endpoints list
      parameters:
        - name: endpoint_id
          in: path
          description: "id"
          type: integer
          required: True

        - name: training_id
          in: path
          type: integer
          required: True
      responses:
        201:
          description: Successfully read endpoint from endpoints list operation
          schema:
            properties:
              endpoint_name:
                type: "string"
              endpoint_id:
                type: integer
              createdDate:
                type: "string"
              training_id:
                type: integer


          examples:
            success:
              value:
                endpoint_id: 7
                endpoint_name: 'OneEndpoint'
                createdDate: '2020-03-26 21:02:00'
                training_id: 9              

        404:
          description: 'Unable to find the endpoint with given endpoint_id'

    delete:
      operationId: endpoint.deleteEndpoint
      summary: Delete a endpoint from the endpoints list
      description: Delete a endpoint
      parameters:
        - name: endpoint_id
          in: path
          type: integer
          required: True

        - name: training_id
          in: path
          type: integer
          required: True
      responses:
        200:
          description: Successfully deleted a endpoint from endpoint list
        404:
          description: 'not found endpoint with the given endpoint_id'